
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftPLUSMINUSleftMULTIPLYDIVIDEDIVIDE EE EQUALS FLOAT GE GT INT LE LT MINUS MULTIPLY NAME NE PLUS STRING agejdan aru azayez efk ilem ma sehviver taggayt tamenguct tasekkirt urkid uslig\n    code : encaps taggayt NAME '{' inner_code '}'\n    \n    encaps : azayez\n            | uslig\n            | sehviver\n            | empty\n    \n    inner_code :  attribut_statement functions_statement\n            | attribut_statement\n            | functions_statement\n    \n    attribut_statement : encaps NAME\n    \n    functions_statement : method functions_statement\n                        | main functions_statement\n                        | empty\n    \n        method : encaps NAME '(' ')' '{' fStates '}'\n    \n        fStates : fState fState\n                | empty\n    \n    fState : var_assign\n            | print_statement\n            | scanf_statement\n            | if_statement\n            | loop_control\n            | empty\n    \n    main :  encaps urkid ilem agejdan '(' ')' '{' statements '}'\n    \n    statements : statement statements\n                | empty\n    \n    statement   : var_assign\n                | print_statement\n                | call_function\n                | scanf_statement\n                | if_statement\n                | loop_control\n                | empty\n    \n    var_assign : NAME EQUALS expression ';'\n    \n    call_function : tasekkirt NAME ';'\n    \n    print_statement : aru '(' expression ')' ';'\n    \n    scanf_statement : efk '(' NAME ')' ';'\n    \n        loop_control : tamenguct '(' INT ')' '{' statementsLoop '}'\n    \n        statementsLoop : statementLoop statementLoop\n                        | empty\n    \n     statementLoop : var_assign\n                    | print_statement\n                    | scanf_statement\n                    | if_statement\n                    | empty\n    \n    if_statement : ma '(' condition ')' '{' con_statements '}'\n    \n    con_statements : con_statement con_statement con_statement\n                    | empty\n    \n        con_statement : var_assign\n                        | print_statement\n                        | scanf_statement\n                        | if_statement\n                        | empty\n    \n        condition : expression comparaison expression\n    \n        comparaison : GT\n                    | LT\n                    | GE\n                    | LE\n                    | EE\n                    | NE\n    \n    expression :  expression MULTIPLY expression\n                | expression DIVIDE expression\n                | expression MINUS expression\n                | expression PLUS expression\n    \n    expression : INT\n                | FLOAT\n    \n    expression : STRING\n    \n    expression : NAME\n    \n    empty :\n    "
    
_lr_action_items = {'azayez':([0,9,12,14,15,17,46,90,],[3,3,3,3,3,-9,-13,-22,]),'uslig':([0,9,12,14,15,17,46,90,],[4,4,4,4,4,-9,-13,-22,]),'sehviver':([0,9,12,14,15,17,46,90,],[5,5,5,5,5,-9,-13,-22,]),'taggayt':([0,2,3,4,5,6,],[-67,7,-2,-3,-4,-5,]),'$end':([1,19,],[0,-1,]),'NAME':([3,4,5,7,9,10,12,14,15,16,17,21,29,33,34,35,36,37,38,39,45,46,49,50,51,53,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,83,84,85,86,87,88,90,97,98,99,101,102,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,],[-2,-3,-4,8,-67,17,-67,-67,-67,-5,-9,26,31,31,-21,-16,-17,-18,-19,-20,54,-13,54,60,54,31,31,-31,-25,-26,-27,-28,-29,-30,92,-32,54,54,54,54,54,-53,-54,-55,-56,-57,-58,-22,-34,-35,31,31,-33,31,-51,-47,-48,-49,-50,31,-43,-39,-40,-41,-42,-44,31,-51,-36,]),'urkid':([3,4,5,9,10,12,14,15,16,17,21,46,90,],[-2,-3,-4,-67,18,-67,-67,-67,-5,-9,18,-13,-22,]),'{':([8,27,44,81,89,],[9,29,53,99,101,]),'}':([9,11,12,13,14,15,16,17,20,22,23,29,32,33,34,35,36,37,38,39,46,47,48,53,64,65,66,67,68,69,70,71,72,74,90,91,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,],[-67,19,-7,-8,-67,-67,-12,-9,-6,-10,-11,-67,46,-67,-15,-16,-17,-18,-19,-20,-13,-14,-21,-67,90,-67,-24,-25,-26,-27,-28,-29,-30,-32,-22,-23,-34,-35,-67,-67,-33,117,-67,-46,-47,-48,-49,-50,120,-67,-38,-39,-40,-41,-42,-44,-67,-51,-36,-37,-43,-45,]),'(':([17,26,28,40,41,42,43,],[24,24,30,49,50,51,52,]),'ilem':([18,],[25,]),')':([24,30,54,56,57,58,59,60,61,63,93,94,95,96,100,],[27,44,-66,-63,-64,-65,79,80,81,89,-59,-60,-61,-62,-52,]),'agejdan':([25,],[28,]),'aru':([29,33,34,35,36,37,38,39,53,65,66,67,68,69,70,71,72,74,97,98,99,101,102,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,],[40,40,-21,-16,-17,-18,-19,-20,40,40,-31,-25,-26,-27,-28,-29,-30,-32,-34,-35,40,40,-33,40,-51,-47,-48,-49,-50,40,-43,-39,-40,-41,-42,-44,40,-51,-36,]),'efk':([29,33,34,35,36,37,38,39,53,65,66,67,68,69,70,71,72,74,97,98,99,101,102,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,],[41,41,-21,-16,-17,-18,-19,-20,41,41,-31,-25,-26,-27,-28,-29,-30,-32,-34,-35,41,41,-33,41,-51,-47,-48,-49,-50,41,-43,-39,-40,-41,-42,-44,41,-51,-36,]),'ma':([29,33,34,35,36,37,38,39,53,65,66,67,68,69,70,71,72,74,97,98,99,101,102,104,105,106,107,108,109,111,112,113,114,115,116,117,118,119,120,],[42,42,-21,-16,-17,-18,-19,-20,42,42,-31,-25,-26,-27,-28,-29,-30,-32,-34,-35,42,42,-33,42,-51,-47,-48,-49,-50,42,-43,-39,-40,-41,-42,-44,42,-51,-36,]),'tamenguct':([29,33,34,35,36,37,38,39,53,65,66,67,68,69,70,71,72,74,97,98,102,117,120,],[43,43,-21,-16,-17,-18,-19,-20,43,43,-31,-25,-26,-27,-28,-29,-30,-32,-34,-35,-33,-44,-36,]),'EQUALS':([31,],[45,]),'INT':([45,49,51,52,75,76,77,78,82,83,84,85,86,87,88,],[56,56,56,63,56,56,56,56,56,-53,-54,-55,-56,-57,-58,]),'FLOAT':([45,49,51,75,76,77,78,82,83,84,85,86,87,88,],[57,57,57,57,57,57,57,57,-53,-54,-55,-56,-57,-58,]),'STRING':([45,49,51,75,76,77,78,82,83,84,85,86,87,88,],[58,58,58,58,58,58,58,58,-53,-54,-55,-56,-57,-58,]),'tasekkirt':([53,65,66,67,68,69,70,71,72,74,97,98,102,117,120,],[73,73,-31,-25,-26,-27,-28,-29,-30,-32,-34,-35,-33,-44,-36,]),';':([54,55,56,57,58,79,80,92,93,94,95,96,],[-66,74,-63,-64,-65,97,98,102,-59,-60,-61,-62,]),'MULTIPLY':([54,55,56,57,58,59,62,93,94,95,96,100,],[-66,75,-63,-64,-65,75,75,-59,-60,75,75,75,]),'DIVIDE':([54,55,56,57,58,59,62,93,94,95,96,100,],[-66,76,-63,-64,-65,76,76,-59,-60,76,76,76,]),'MINUS':([54,55,56,57,58,59,62,93,94,95,96,100,],[-66,77,-63,-64,-65,77,77,-59,-60,-61,-62,77,]),'PLUS':([54,55,56,57,58,59,62,93,94,95,96,100,],[-66,78,-63,-64,-65,78,78,-59,-60,-61,-62,78,]),'GT':([54,56,57,58,62,93,94,95,96,],[-66,-63,-64,-65,83,-59,-60,-61,-62,]),'LT':([54,56,57,58,62,93,94,95,96,],[-66,-63,-64,-65,84,-59,-60,-61,-62,]),'GE':([54,56,57,58,62,93,94,95,96,],[-66,-63,-64,-65,85,-59,-60,-61,-62,]),'LE':([54,56,57,58,62,93,94,95,96,],[-66,-63,-64,-65,86,-59,-60,-61,-62,]),'EE':([54,56,57,58,62,93,94,95,96,],[-66,-63,-64,-65,87,-59,-60,-61,-62,]),'NE':([54,56,57,58,62,93,94,95,96,],[-66,-63,-64,-65,88,-59,-60,-61,-62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'encaps':([0,9,12,14,15,],[2,10,21,21,21,]),'empty':([0,9,12,14,15,29,33,53,65,99,101,104,111,118,],[6,16,16,16,16,34,48,66,66,105,112,119,122,119,]),'inner_code':([9,],[11,]),'attribut_statement':([9,],[12,]),'functions_statement':([9,12,14,15,],[13,20,22,23,]),'method':([9,12,14,15,],[14,14,14,14,]),'main':([9,12,14,15,],[15,15,15,15,]),'fStates':([29,],[32,]),'fState':([29,33,],[33,47,]),'var_assign':([29,33,53,65,99,101,104,111,118,],[35,35,67,67,106,113,106,113,106,]),'print_statement':([29,33,53,65,99,101,104,111,118,],[36,36,68,68,107,114,107,114,107,]),'scanf_statement':([29,33,53,65,99,101,104,111,118,],[37,37,70,70,108,115,108,115,108,]),'if_statement':([29,33,53,65,99,101,104,111,118,],[38,38,71,71,109,116,109,116,109,]),'loop_control':([29,33,53,65,],[39,39,72,72,]),'expression':([45,49,51,75,76,77,78,82,],[55,59,62,93,94,95,96,100,]),'condition':([51,],[61,]),'statements':([53,65,],[64,91,]),'statement':([53,65,],[65,65,]),'call_function':([53,65,],[69,69,]),'comparaison':([62,],[82,]),'con_statements':([99,],[103,]),'con_statement':([99,104,118,],[104,118,123,]),'statementsLoop':([101,],[110,]),'statementLoop':([101,111,],[111,121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> encaps taggayt NAME { inner_code }','code',6,'p_code','TamazightLexerParser.py',133),
  ('encaps -> azayez','encaps',1,'p_Encaps','TamazightLexerParser.py',139),
  ('encaps -> uslig','encaps',1,'p_Encaps','TamazightLexerParser.py',140),
  ('encaps -> sehviver','encaps',1,'p_Encaps','TamazightLexerParser.py',141),
  ('encaps -> empty','encaps',1,'p_Encaps','TamazightLexerParser.py',142),
  ('inner_code -> attribut_statement functions_statement','inner_code',2,'p_inCode','TamazightLexerParser.py',148),
  ('inner_code -> attribut_statement','inner_code',1,'p_inCode','TamazightLexerParser.py',149),
  ('inner_code -> functions_statement','inner_code',1,'p_inCode','TamazightLexerParser.py',150),
  ('attribut_statement -> encaps NAME','attribut_statement',2,'p_attr_statement','TamazightLexerParser.py',156),
  ('functions_statement -> method functions_statement','functions_statement',2,'p_function','TamazightLexerParser.py',162),
  ('functions_statement -> main functions_statement','functions_statement',2,'p_function','TamazightLexerParser.py',163),
  ('functions_statement -> empty','functions_statement',1,'p_function','TamazightLexerParser.py',164),
  ('method -> encaps NAME ( ) { fStates }','method',7,'p_method','TamazightLexerParser.py',171),
  ('fStates -> fState fState','fStates',2,'p_fStates','TamazightLexerParser.py',179),
  ('fStates -> empty','fStates',1,'p_fStates','TamazightLexerParser.py',180),
  ('fState -> var_assign','fState',1,'p_fState','TamazightLexerParser.py',187),
  ('fState -> print_statement','fState',1,'p_fState','TamazightLexerParser.py',188),
  ('fState -> scanf_statement','fState',1,'p_fState','TamazightLexerParser.py',189),
  ('fState -> if_statement','fState',1,'p_fState','TamazightLexerParser.py',190),
  ('fState -> loop_control','fState',1,'p_fState','TamazightLexerParser.py',191),
  ('fState -> empty','fState',1,'p_fState','TamazightLexerParser.py',192),
  ('main -> encaps urkid ilem agejdan ( ) { statements }','main',9,'p_main','TamazightLexerParser.py',199),
  ('statements -> statement statements','statements',2,'p_statements','TamazightLexerParser.py',205),
  ('statements -> empty','statements',1,'p_statements','TamazightLexerParser.py',206),
  ('statement -> var_assign','statement',1,'p_statement','TamazightLexerParser.py',212),
  ('statement -> print_statement','statement',1,'p_statement','TamazightLexerParser.py',213),
  ('statement -> call_function','statement',1,'p_statement','TamazightLexerParser.py',214),
  ('statement -> scanf_statement','statement',1,'p_statement','TamazightLexerParser.py',215),
  ('statement -> if_statement','statement',1,'p_statement','TamazightLexerParser.py',216),
  ('statement -> loop_control','statement',1,'p_statement','TamazightLexerParser.py',217),
  ('statement -> empty','statement',1,'p_statement','TamazightLexerParser.py',218),
  ('var_assign -> NAME EQUALS expression ;','var_assign',4,'p_varAssign','TamazightLexerParser.py',225),
  ('call_function -> tasekkirt NAME ;','call_function',3,'p_callFunction','TamazightLexerParser.py',232),
  ('print_statement -> aru ( expression ) ;','print_statement',5,'p_printStat','TamazightLexerParser.py',239),
  ('scanf_statement -> efk ( NAME ) ;','scanf_statement',5,'p_scanfStat','TamazightLexerParser.py',246),
  ('loop_control -> tamenguct ( INT ) { statementsLoop }','loop_control',7,'p_loopControl','TamazightLexerParser.py',253),
  ('statementsLoop -> statementLoop statementLoop','statementsLoop',2,'p_statementsLoop','TamazightLexerParser.py',260),
  ('statementsLoop -> empty','statementsLoop',1,'p_statementsLoop','TamazightLexerParser.py',261),
  ('statementLoop -> var_assign','statementLoop',1,'p_statementloop','TamazightLexerParser.py',269),
  ('statementLoop -> print_statement','statementLoop',1,'p_statementloop','TamazightLexerParser.py',270),
  ('statementLoop -> scanf_statement','statementLoop',1,'p_statementloop','TamazightLexerParser.py',271),
  ('statementLoop -> if_statement','statementLoop',1,'p_statementloop','TamazightLexerParser.py',272),
  ('statementLoop -> empty','statementLoop',1,'p_statementloop','TamazightLexerParser.py',273),
  ('if_statement -> ma ( condition ) { con_statements }','if_statement',7,'p_ifStatement','TamazightLexerParser.py',280),
  ('con_statements -> con_statement con_statement con_statement','con_statements',3,'p_conStatements','TamazightLexerParser.py',289),
  ('con_statements -> empty','con_statements',1,'p_conStatements','TamazightLexerParser.py',290),
  ('con_statement -> var_assign','con_statement',1,'p_conStatement','TamazightLexerParser.py',297),
  ('con_statement -> print_statement','con_statement',1,'p_conStatement','TamazightLexerParser.py',298),
  ('con_statement -> scanf_statement','con_statement',1,'p_conStatement','TamazightLexerParser.py',299),
  ('con_statement -> if_statement','con_statement',1,'p_conStatement','TamazightLexerParser.py',300),
  ('con_statement -> empty','con_statement',1,'p_conStatement','TamazightLexerParser.py',301),
  ('condition -> expression comparaison expression','condition',3,'p_condition','TamazightLexerParser.py',308),
  ('comparaison -> GT','comparaison',1,'p_comparaison','TamazightLexerParser.py',315),
  ('comparaison -> LT','comparaison',1,'p_comparaison','TamazightLexerParser.py',316),
  ('comparaison -> GE','comparaison',1,'p_comparaison','TamazightLexerParser.py',317),
  ('comparaison -> LE','comparaison',1,'p_comparaison','TamazightLexerParser.py',318),
  ('comparaison -> EE','comparaison',1,'p_comparaison','TamazightLexerParser.py',319),
  ('comparaison -> NE','comparaison',1,'p_comparaison','TamazightLexerParser.py',320),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','TamazightLexerParser.py',327),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','TamazightLexerParser.py',328),
  ('expression -> expression MINUS expression','expression',3,'p_expression','TamazightLexerParser.py',329),
  ('expression -> expression PLUS expression','expression',3,'p_expression','TamazightLexerParser.py',330),
  ('expression -> INT','expression',1,'p_expression_int_float','TamazightLexerParser.py',337),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','TamazightLexerParser.py',338),
  ('expression -> STRING','expression',1,'p_expression_string','TamazightLexerParser.py',345),
  ('expression -> NAME','expression',1,'p_expression_var','TamazightLexerParser.py',352),
  ('empty -> <empty>','empty',0,'p_empty','TamazightLexerParser.py',359),
]
