Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADERYIS
    ARU
    ASEKKIT
    AZAYEZ
    GHER
    ILAW
    MA
    MA_ULAC
    SEHVIVER
    TAGGAYT
    TIMMAD
    TUKKEST
    T_TIDETT
    USLIG

Grammar

Rule 0     S' -> statement
Rule 1     statement -> var_assign
Rule 2     statement -> empty
Rule 3     var_assign -> NAME EQUALS expression
Rule 4     expression -> expression MULTIPLY expression
Rule 5     expression -> expression DIVIDE expression
Rule 6     expression -> expression MINUS expression
Rule 7     expression -> expression PLUS expression
Rule 8     expression -> INT
Rule 9     expression -> FLOAT
Rule 10    expression -> STRING
Rule 11    expression -> NAME
Rule 12    empty -> <empty>

Terminals, with rules where they appear

ADERYIS              : 
ARU                  : 
ASEKKIT              : 
AZAYEZ               : 
DIVIDE               : 5
EQUALS               : 3
FLOAT                : 9
GHER                 : 
ILAW                 : 
INT                  : 8
MA                   : 
MA_ULAC              : 
MINUS                : 6
MULTIPLY             : 4
NAME                 : 3 11
PLUS                 : 7
SEHVIVER             : 
STRING               : 10
TAGGAYT              : 
TIMMAD               : 
TUKKEST              : 
T_TIDETT             : 
USLIG                : 
error                : 

Nonterminals, with rules where they appear

empty                : 2
expression           : 3 4 4 5 5 6 6 7 7
statement            : 0
var_assign           : 1

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . var_assign
    (2) statement -> . empty
    (3) var_assign -> . NAME EQUALS expression
    (12) empty -> .

    NAME            shift and go to state 4
    $end            reduce using rule 12 (empty -> .)

    statement                      shift and go to state 1
    var_assign                     shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> statement .



state 2

    (1) statement -> var_assign .

    $end            reduce using rule 1 (statement -> var_assign .)


state 3

    (2) statement -> empty .

    $end            reduce using rule 2 (statement -> empty .)


state 4

    (3) var_assign -> NAME . EQUALS expression

    EQUALS          shift and go to state 5


state 5

    (3) var_assign -> NAME EQUALS . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . STRING
    (11) expression -> . NAME

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    NAME            shift and go to state 6

    expression                     shift and go to state 7

state 6

    (11) expression -> NAME .

    MULTIPLY        reduce using rule 11 (expression -> NAME .)
    DIVIDE          reduce using rule 11 (expression -> NAME .)
    MINUS           reduce using rule 11 (expression -> NAME .)
    PLUS            reduce using rule 11 (expression -> NAME .)
    $end            reduce using rule 11 (expression -> NAME .)


state 7

    (3) var_assign -> NAME EQUALS expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . PLUS expression

    $end            reduce using rule 3 (var_assign -> NAME EQUALS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12
    MINUS           shift and go to state 13
    PLUS            shift and go to state 14


state 8

    (8) expression -> INT .

    MULTIPLY        reduce using rule 8 (expression -> INT .)
    DIVIDE          reduce using rule 8 (expression -> INT .)
    MINUS           reduce using rule 8 (expression -> INT .)
    PLUS            reduce using rule 8 (expression -> INT .)
    $end            reduce using rule 8 (expression -> INT .)


state 9

    (9) expression -> FLOAT .

    MULTIPLY        reduce using rule 9 (expression -> FLOAT .)
    DIVIDE          reduce using rule 9 (expression -> FLOAT .)
    MINUS           reduce using rule 9 (expression -> FLOAT .)
    PLUS            reduce using rule 9 (expression -> FLOAT .)
    $end            reduce using rule 9 (expression -> FLOAT .)


state 10

    (10) expression -> STRING .

    MULTIPLY        reduce using rule 10 (expression -> STRING .)
    DIVIDE          reduce using rule 10 (expression -> STRING .)
    MINUS           reduce using rule 10 (expression -> STRING .)
    PLUS            reduce using rule 10 (expression -> STRING .)
    $end            reduce using rule 10 (expression -> STRING .)


state 11

    (4) expression -> expression MULTIPLY . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . STRING
    (11) expression -> . NAME

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    NAME            shift and go to state 6

    expression                     shift and go to state 15

state 12

    (5) expression -> expression DIVIDE . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . STRING
    (11) expression -> . NAME

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    NAME            shift and go to state 6

    expression                     shift and go to state 16

state 13

    (6) expression -> expression MINUS . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . STRING
    (11) expression -> . NAME

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    NAME            shift and go to state 6

    expression                     shift and go to state 17

state 14

    (7) expression -> expression PLUS . expression
    (4) expression -> . expression MULTIPLY expression
    (5) expression -> . expression DIVIDE expression
    (6) expression -> . expression MINUS expression
    (7) expression -> . expression PLUS expression
    (8) expression -> . INT
    (9) expression -> . FLOAT
    (10) expression -> . STRING
    (11) expression -> . NAME

    INT             shift and go to state 8
    FLOAT           shift and go to state 9
    STRING          shift and go to state 10
    NAME            shift and go to state 6

    expression                     shift and go to state 18

state 15

    (4) expression -> expression MULTIPLY expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . PLUS expression

    MULTIPLY        reduce using rule 4 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 4 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 4 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 4 (expression -> expression MULTIPLY expression .)
    $end            reduce using rule 4 (expression -> expression MULTIPLY expression .)

  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! PLUS            [ shift and go to state 14 ]


state 16

    (5) expression -> expression DIVIDE expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . PLUS expression

    MULTIPLY        reduce using rule 5 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 5 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 5 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 5 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 5 (expression -> expression DIVIDE expression .)

  ! MULTIPLY        [ shift and go to state 11 ]
  ! DIVIDE          [ shift and go to state 12 ]
  ! MINUS           [ shift and go to state 13 ]
  ! PLUS            [ shift and go to state 14 ]


state 17

    (6) expression -> expression MINUS expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . PLUS expression

    MINUS           reduce using rule 6 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 6 (expression -> expression MINUS expression .)
    $end            reduce using rule 6 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 6 (expression -> expression MINUS expression .) ]
  ! MINUS           [ shift and go to state 13 ]
  ! PLUS            [ shift and go to state 14 ]


state 18

    (7) expression -> expression PLUS expression .
    (4) expression -> expression . MULTIPLY expression
    (5) expression -> expression . DIVIDE expression
    (6) expression -> expression . MINUS expression
    (7) expression -> expression . PLUS expression

    MINUS           reduce using rule 7 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 7 (expression -> expression PLUS expression .)
    $end            reduce using rule 7 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 11
    DIVIDE          shift and go to state 12

  ! MULTIPLY        [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 7 (expression -> expression PLUS expression .) ]
  ! MINUS           [ shift and go to state 13 ]
  ! PLUS            [ shift and go to state 14 ]

